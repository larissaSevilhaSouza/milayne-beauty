(function(global,factory){typeof exports=="object"&&typeof module<"u"?module.exports=factory(require("@hotwired/stimulus")):typeof define=="function"&&define.amd?define(["@hotwired/stimulus"],factory):(global=typeof globalThis<"u"?globalThis:global||self,global.StimulusAnimatedNumber=factory(global.Stimulus))})(this,function(stimulus){"use strict";const _AnimatedNumber=class _AnimatedNumber extends stimulus.Controller{connect(){this.lazyValue?this.lazyAnimate():this.animate()}animate(){let startTimestamp=null;const step=timestamp=>{startTimestamp||(startTimestamp=timestamp);const elapsed=timestamp-startTimestamp,progress=Math.min(elapsed/this.durationValue,1);this.element.innerHTML=Math.floor(progress*(this.endValue-this.startValue)+this.startValue).toString(),progress<1&&window.requestAnimationFrame(step)};window.requestAnimationFrame(step)}lazyAnimate(){new IntersectionObserver((entries,observer2)=>{entries.forEach(entry=>{entry.isIntersecting&&(this.animate(),observer2.unobserve(entry.target))})},this.lazyAnimateOptions).observe(this.element)}get lazyAnimateOptions(){return{threshold:this.lazyThresholdValue,rootMargin:this.lazyRootMarginValue}}};_AnimatedNumber.values={start:Number,end:Number,duration:Number,lazyThreshold:Number,lazyRootMargin:{type:String,default:"0px"},lazy:Boolean};let AnimatedNumber=_AnimatedNumber;return AnimatedNumber});
