# Enable BuildKit by default:
#   https://docs.docker.com/develop/develop-images/build_enhancements
export DOCKER_BUILDKIT=1

# Rather than use the directory name, let's control the name of the project.
export COMPOSE_PROJECT_NAME=camaranovaalvoradadosul

# You can even choose not to run postgres and redis in prod if you plan to use
# managed cloud services. Everything "just works", even optional depends_on!
# export COMPOSE_PROFILES=postgres,redis,app
export COMPOSE_PROFILES=postgres,redis,app,css_js

# If you're running native Linux and your uid:gid isn't 1000:1000 you can set
# these to match your values before you build your image. You can check what
# your uid:gid is by running `id` from your terminal.
#export UID=1000
#export GID=1000

# You can generate a more secure secret by running: ./run rails secret
export SECRET_KEY_BASE=insecure_key_for_dev

# Which environment is running? These should be "development" or "production".
#export RAILS_ENV=production
export RAILS_ENV=development
export NODE_ENV=development

# The bind port for puma.
export PORT=3000

#export DOCKER_APP_PORT_FORWARD=127.0.0.1:3000
export DOCKER_APP_PORT_FORWARD=3000

# You'll always want to set POSTGRES_USER and POSTGRES_PASSWORD since the
# postgres Docker image uses them for its default database user and password.
export POSTGRES_DB=agenciaw3
export POSTGRES_USER=agenciaw3
export POSTGRES_PASSWORD=password
export POSTGRES_HOST=postgres
export POSTGRES_PORT=5432

# What's your full Redis connection URL? This will be used for caching, Sidekiq,
# and Action Cable. You can always split them up later.
#export REDIS_URL=redis://redis:6379/1

# If this is set then Rails will serve files from public/ in production. You
# probably don't want this behavior unless you're testing prod mode locally,
# because nginx would typically serve static files.
#export RAILS_SERVE_STATIC_FILES=true

# Should Docker restart your containers if they go down in unexpected ways?
#export DOCKER_RESTART_POLICY=unless-stopped
export DOCKER_RESTART_POLICY=no

# What health check test command do you want to run? In development, having it
# curl your web server will result in a lot of log spam, so setting it to
# /bin/true is an easy way to make the health check do basically nothing.
#export DOCKER_APP_HEALTHCHECK_TEST=curl localhost:3000/up
export DOCKER_APP_HEALTHCHECK_TEST=/bin/true

# What volume path should be used? In dev we want to volume mount everything
# so that we can develop our code without rebuilding our Docker images.
export DOCKER_POSTGRES_VOLUME=postgres:/var/lib/postgresql/data
export DOCKER_DOCKER_REDIS_VOLUME_VOLUME=redis:/data
export DOCKER_RAILS_LOG_VOLUME=./log

# What CPU and memory constraints will be added to your services? When left at
# 0 they will happily use as much as needed.
# export DOCKER_POSTGRES_CPUS=0
# export DOCKER_POSTGRES_MEMORY=0
# export DOCKER_REDIS_CPUS=0
# export DOCKER_REDIS_MEMORY=0
# export DOCKER_APP_CPUS=0
# export DOCKER_APP_MEMORY=0

# Configuration all env mail
SMTP_ADDRESS=smtp.emailemnuvem.com.br
SMTP_PORT=587
SMTP_DOMAIN=agenciaw3.digital
SMTP_USER_NAME=no-replay@agenciaw3.digital
SMTP_PASSWORD=Usuario@2019

# From email
SMTP_FROM_MAIL=atendimento@agenciaw3.digital

# Paths and URls  
UPLOAD_HOST=http://localhost:3000
SFTP_FOLDER=
SFTP_HOST=
SFTP_USER=
SFTP_PASSWORD=

RACK_MULTIPART_PART_LIMIT=0
RACK_MULTIPART_LIMIT=0

RECAPTCHA_SITE_KEY=
RECAPTCHA_SECRET_KEY=

DOMAIN=http://localhost:3000

# Webpush
WEBPUSH_PUBLIC_KEY=BGd8iX0FqUqlqj2UbxAqGDK6pZ6uuXy6IDuCMzJNdqm7siaJkGQxRUb0WFKN6GNsfoaTbyG8qrtwzFBZwD1MwO0
WEBPUSH_PRIVATE_KEY=JbM4Y04jYdrrwzrenz1Jg2c-UM4TsfGSn0YQeZNtgeY=
MAILTO=atendimento@w3case.com.br