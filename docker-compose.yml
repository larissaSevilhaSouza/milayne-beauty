x-app: &app
  build:
    context: .
    args:
      - "UID=${UID:-1000}"
      - "GID=${GID:-1000}"
      - "RAILS_ENV=${RAILS_ENV:-production}"
      - "NODE_ENV=${NODE_ENV:-production}"
  depends_on:
    - "postgres"
    - "redis"
  env_file:
    - ".env"
  restart: "${DOCKER_RESTART_POLICY:-unless-stopped}"
  stop_grace_period: "3s"
  stdin_open: true
  tty: true
  volumes:
    - .:/app

services:
  postgres:
    deploy:
      resources:
        limits:
          cpus: "${DOCKER_POSTGRES_CPUS:-0}"
          memory: "${DOCKER_POSTGRES_MEMORY:-0}"
    environment:
      POSTGRES_USER: "${POSTGRES_USER}"
      POSTGRES_PASSWORD: "${POSTGRES_PASSWORD}"
    image: "postgres:15.2-bullseye"
    container_name: "${COMPOSE_PROJECT_NAME}_db"
    restart: "${DOCKER_RESTART_POLICY:-unless-stopped}"
    stop_grace_period: "3s"
    volumes:
      - "${DOCKER_POSTGRES_VOLUME:-postgres:/var/lib/postgresql/data}"
    profiles: ["postgres"]
    networks:
      - project_network

  redis:
    deploy:
      resources:
        limits:
          cpus: "${DOCKER_REDIS_CPUS:-0}"
          memory: "${DOCKER_REDIS_MEMORY:-0}"
    image: "redis:7.0.8-bullseye"
    restart: "${DOCKER_RESTART_POLICY:-unless-stopped}"
    stop_grace_period: "3s"
    volumes:
      - "${DOCKER_REDIS_VOLUME:-redis:/data}"
    container_name: "${COMPOSE_PROJECT_NAME}_redis"
    profiles: ["redis"]
    networks:
      - project_network

  app:
    <<: *app
    deploy:
      resources:
        limits:
          cpus: "${DOCKER_APP_CPUS:-0}"
          memory: "${DOCKER_APP_MEMORY:-0}"
    healthcheck:
      test: "${DOCKER_APP_HEALTHCHECK_TEST:-curl localhost:8000/up}"
      interval: "60s"
      timeout: "3s"
      start_period: "5s"
      retries: 3
    command: bundle exec puma -C config/puma.rb
    ports:
      - "${DOCKER_APP_PORT_FORWARD}:${PORT}"
    container_name: "${COMPOSE_PROJECT_NAME}_app"
    profiles: ["app"]
    networks:
      - nginx-network
      - project_network

  css_js:
    <<: *app
    command: "bin/dev"
    container_name: "${COMPOSE_PROJECT_NAME}_css"
    profiles: ["css_js"]
    networks:
      - project_network

volumes:
  postgres:
  redis:

networks:
  project_network:
    driver: bridge
    ipam:
      config:
        - subnet: 10.0.98.0/24
          gateway: 10.0.98.1
    name: "${COMPOSE_PROJECT_NAME}_network"

  nginx-network:
    external: true
